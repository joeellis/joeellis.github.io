<?xml version="1.0" encoding="UTF-8"?> <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"> <channel> <title>joeellis.la</title> <description>Tech musings on all things Elixir, Ruby, and Javascript.</description> <link>http://joeellis.la/</link> <atom:link href="http://joeellis.la/feed.xml" rel="self" type="application/rss+xml"/> <pubDate>Wed, 21 Jun 2017 22:17:52 -0500</pubDate> <lastBuildDate>Wed, 21 Jun 2017 22:17:52 -0500</lastBuildDate> <generator>Jekyll v3.4.3</generator> <item> <title>Redux Architecture and Guidelines</title> <description>&lt;p&gt;I’ve written many Redux apps over the years, and it is by far my favorite JS framework. The only downside is, unlike other frameworks, Redux is far less opinionated in how to structure an app. I prefer this freedom, but it does make for a steeper learning curve, especially if you’re new to Redux. So I decided to write up some of the higher level thinking and structure I’ve picked up and use when thinking about Redux app architecture. Hopefully it comes in handy for someone out there.&lt;/p&gt; &lt;h3 id=&quot;state&quot;&gt;State&lt;/h3&gt; &lt;h5 id=&quot;plan-your-state-shape&quot;&gt;Plan your state shape&lt;/h5&gt; &lt;p&gt;In terms of saving time down the road, planning the structure of your state object upfront is most valuable thing you can do for your app. A poorly formed state object will make your app difficult to maintain and is avoidable with some planning. I run through this quick checklist when planning out state objects:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;How will it store multiple resources from an API (users, accounts, items, etc)?&lt;/li&gt; &lt;li&gt;How will it handle loading states (showing loading spinners when fetching /updating data)?&lt;/li&gt; &lt;li&gt;How will it handle showing and clearing of UI success and error notifications?&lt;/li&gt; &lt;li&gt;Does it feel consistent and predictable? Could another team member easily work with it?&lt;/li&gt; &lt;li&gt;Is it easy to access data within it? Does it nest properties unnecessarily?&lt;/li&gt; &lt;li&gt;Is it serializable? Could it easily be stored away in localstorage or in a database?&lt;/li&gt; &lt;li&gt;Are there any properties you could pull from the URL instead of in the state?&lt;/li&gt; &lt;li&gt;Is there any duplicated data in here? If os, is that really needed?&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;There are &lt;strong&gt;many&lt;/strong&gt; different ways to answer these questions - it depends on your app. But in my experience, having at least an answer for each will save you time in the long run.&lt;/p&gt; &lt;h5 id=&quot;avoid-nesting-state-objects&quot;&gt;Avoid nesting state objects&lt;/h5&gt; &lt;p&gt;Some Redux apps have deeply nested state structures, i.e. shapes that look like this:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;qux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;I find this happens when we are dealing with relational data since it feels natural to use nesting to represent those relationships. Unfortunately for us, JavaScript lacks good native tools for handling and merging nested data structures. Using them can even cause performance issues with React / Redux itself.&lt;/p&gt; &lt;p&gt;Consider instead to flatten and &lt;a href=&quot;http://redux.js.org/docs/recipes/reducers/NormalizingStateShape.html&quot;&gt;normalize&lt;/a&gt; your state shape. In Redux land, the shallower the nesting, the easier it will be to fetch and update state data in your app. Normalized states solve the problems listed above, and make your state more flexible overall.&lt;/p&gt; &lt;h5 id=&quot;storing-only-raw-data-in-the-state&quot;&gt;Storing only raw data in the state&lt;/h5&gt; &lt;p&gt;It’s tempting to use Redux’s state as a vehicle to store any and all information you think you may need later. Yet, doing so will increase your app’s complexity in the form of state bloat and redundant properties. This, in turn, increases complexity in your actions, reducers, and tests. So what should and shouldn’t be stored?&lt;/p&gt; &lt;p&gt;In Redux apps, there are really two types of data. The first is raw data, data your app requires to run. User data fetched from an API is an example of raw data - without it, your app won’t have the information it needs to run. The second is derived data, or data created from other existing data. Using the &lt;code class=&quot;highlighter-rouge&quot;&gt;firstName&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;lastName&lt;/code&gt; properties to display a user’s name as &lt;code class=&quot;highlighter-rouge&quot;&gt;Jane Doe&lt;/code&gt; is an example of derived data.&lt;/p&gt; &lt;p&gt;I recommend persisting &lt;strong&gt;only&lt;/strong&gt; raw data in your state. It helps reduces state bloat and makes it easier to reason about what data is important in your app. All other derived data should be created using functions that accept that raw data from the state return back the information you need.&lt;/p&gt; &lt;p&gt;Before adding something new to the state object, ask yourself this question, “Can I create this from data that already exists in the state?” If the answer is “yes”, then create that data with a function. If the answer is “no”, then you may have a good case to add this data to the state. You may be surprised over time how rarely the answer is “no.”&lt;/p&gt; &lt;h5 id=&quot;prefer-redux-state-over-react-state&quot;&gt;Prefer Redux state over React state&lt;/h5&gt; &lt;p&gt;React comes with &lt;a href=&quot;https://facebook.github.io/react/docs/react-component.html#state&quot;&gt;its own system for managing state&lt;/a&gt; inside of components. In a Redux app, though, prefer to use Redux’s state for the majority of your app data and inter-component communication. It is overall much easier to reason about your app when there is one accepted way for components to set and access state, especially if you are working within a team.&lt;/p&gt; &lt;p&gt;Note that there are reasonable exceptions to this guideline. It can be beneficial for complex UI components to persist local properties using React component state, especially when those properties aren’t globally important to the app. When doing this, just try to keep that React state management localized to that component. Using two separate state systems too much, especially for inter-component communication, is likely to just cause confusion for the developer after you.&lt;/p&gt; &lt;h3 id=&quot;actions&quot;&gt;Actions&lt;/h3&gt; &lt;h5 id=&quot;standardize-action-payloads&quot;&gt;Standardize action payloads&lt;/h5&gt; &lt;p&gt;When working with a team, having a standard object shape for your actions is very helpful. Doing so reduces &lt;a href=&quot;http://bikeshed.org/&quot;&gt;bikeshedding&lt;/a&gt; and creates maintainable and testable code. I highly recommend adopting some kind of standard with your team. I use the &lt;a href=&quot;https://github.com/acdlite/flux-standard-action&quot;&gt;Flux Standard Action spec&lt;/a&gt; because it is straightforward and simple to understand. But whatever you use, make sure it’s consistent and easy to work with.&lt;/p&gt; &lt;h5 id=&quot;ensure-action-creators-are-composable&quot;&gt;Ensure action creators are composable&lt;/h5&gt; &lt;p&gt;Many example apps and tutorials I run across use simple action creator functions when teaching Redux concepts. This is great for illustrating a point, but real world apps are complex. It’s inevitable that you will need to compose higher-level complex actions, preferably from existing action creators you have already written.&lt;/p&gt; &lt;p&gt;Start a habit of making sure all your action creator functions are composable in some way. It’s a simple rule that really pays off when you need it. I personally wrap each action creator in a &lt;a href=&quot;https://github.com/then/promise&quot;&gt;promise&lt;/a&gt; so they can be chained together easily using the &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; function.&lt;/p&gt; &lt;h3 id=&quot;component-architecture&quot;&gt;Component Architecture&lt;/h3&gt; &lt;h5 id=&quot;containers--presentational-components&quot;&gt;Containers &amp;amp; presentational components&lt;/h5&gt; &lt;p&gt;The most useful concept I’ve come across for building stable and easily maintainable Redux apps is the &lt;a href=&quot;http://redux.js.org/docs/basics/UsageWithReact.html#presentational-and-container-components&quot;&gt;container &amp;amp; presentational component&lt;/a&gt; paradigm as described by Dan Abramov in the official Redux documentation. I will not dive into it here as the docs already do a great job at explaining the concept with great examples. But understanding this paradigm may be one of the most useful things you can learn about in Redux land. It is very difficult to maintain and iterate on an app of even moderate complexity without it.&lt;/p&gt; &lt;h5 id=&quot;use-intermediary-containers&quot;&gt;Use intermediary containers&lt;/h5&gt; &lt;p&gt;While the container / presentational component paradigm works well, it’s not always clear on when containers should be introduced. I’ve seen (and written) apps with a single top-level container that fetches the whole world and then passes down everything to its component’s children and their children’s children. This results in props ‘passing through’ multiple components before they are ever even used. As your app grows, this becomes an annoying problem as even simple changes, like renaming props, involves changing many other non-related components. Definitely a code smell that something is not right.&lt;/p&gt; &lt;p&gt;Instead, create containers when you notice multiple props ‘passing through’ multiple components. There is no need to pass props from one end to the other when a container in the middle can access the state and create those props for you. Intermediary containers also have added benefits, such as encapsulating sections of your component tree making their children easier to maintain and test. Don’t be afraid to use them if the situation calls for it.&lt;/p&gt; &lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt; &lt;p&gt;Remember that there are no hard rules for Redux apps, these are simply guidelines. After all, part of the fun and interesting things about Redux is its free form structure, so do not consider any of these points as the best or only way to do things. They are simply my way of doing things and so far they’ve proven useful enough to be worth repeating here.&lt;/p&gt; </description> <pubDate>Tue, 20 Jun 2017 00:00:00 -0500</pubDate> <link>http://joeellis.la/redux-architecture/</link> <guid isPermaLink="true">http://joeellis.la/redux-architecture/</guid> <category>react</category> <category>redux</category> </item> <item> <title>Connect to Running Elixir Applications with IEx Remote Shell</title> <description>&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;--remsh&lt;/code&gt; has security issues you should be aware of when using it on your local machine. Please be sure to read the &lt;strong&gt;security section&lt;/strong&gt; at the bottom of this article.&lt;/p&gt; &lt;p&gt;Recently I learned about a fun option built into IEx called &lt;code class=&quot;highlighter-rouge&quot;&gt;--remsh&lt;/code&gt; or “remote shell”. It creates an IEx shell in the context of an Elixir node, allowing you to debug and reproduce issues inside a running application! Also note that despite the name, &lt;code class=&quot;highlighter-rouge&quot;&gt;--remsh&lt;/code&gt; can connect IEx to either local or remote nodes / applications. Here’s an example of how it works:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;# when running Elixir app on a server called example.com...&lt;/span&gt; &lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;iex --name &lt;span class=&quot;s2&quot;&gt;&quot;joe@iex_test&quot;&lt;/span&gt; --cookie secret_cookie --remsh &lt;span class=&quot;s2&quot;&gt;&quot;node@example.com&quot;&lt;/span&gt; &lt;span class=&quot;gp&quot;&gt;iex(node@example.com)1&amp;gt; &lt;/span&gt;Node.list &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;:joe@iex_test]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--remsh&lt;/code&gt; works in combination with two other options, &lt;code class=&quot;highlighter-rouge&quot;&gt;--name&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;--cookie&lt;/code&gt;. The first is required and creates a named IEx shell to identify yourself to other nodes in the cluster. The second is not required but usually needed - it’s the &lt;a href=&quot;http://erlang.org/doc/reference_manual/distributed.html#id88372&quot;&gt;the security cookie&lt;/a&gt; needed to access the node (often found under your home directory at &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.erlang.cookie&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;You could also wrap this up in a simple bash script to make it even easier to use:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;reiex&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;staging&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then &lt;/span&gt;iex --name &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;whoami&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@reiex&quot;&lt;/span&gt; --cookie secret_cookie --remsh &lt;span class=&quot;s2&quot;&gt;&quot;node@staging.example.com&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;prod&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then &lt;/span&gt;iex --name &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;whoami&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@reiex&quot;&lt;/span&gt; --cookie secret_cookie --remsh &lt;span class=&quot;s2&quot;&gt;&quot;node@prod.example.com&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Environment not found!&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Just run &lt;code class=&quot;highlighter-rouge&quot;&gt;reiex &amp;lt;environment name&amp;gt;&lt;/code&gt; to connect to your staging or production servers.&lt;/p&gt; &lt;h4 id=&quot;security-issues&quot;&gt;Security Issues&lt;/h4&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--remsh&lt;/code&gt; has security implications you should be aware of before using it. Remember - Elixir / Erlang nodes have complete access to all other nodes in a given cluster. So when you connect from your laptop via &lt;code class=&quot;highlighter-rouge&quot;&gt;--remsh&lt;/code&gt;, other nodes in that cluster &lt;strong&gt;can now access and make RPC calls on your local workstation&lt;/strong&gt;. If you connect to a remote node that has been compromised from your local machine, your private files (even private SSH keys) would be up for grabs.&lt;/p&gt; &lt;p&gt;If you plan to do any serious work with remsh, I recommend reading &lt;a href=&quot;https://broot.ca/erlang-remsh-is-dangerous&quot;&gt;Alex Weber’s writeup&lt;/a&gt; which goes in further detail about this issue. Alex also offers us a more secure alternative: create an SSH connection to your remote machine first and &lt;code class=&quot;highlighter-rouge&quot;&gt;remsh&lt;/code&gt; locally to the node from there. This can at least prevent node RPC calls from being made against your workstation as well as establish a more secure connection between your machine and the node.&lt;/p&gt; &lt;p&gt;Happy &lt;code class=&quot;highlighter-rouge&quot;&gt;--remsh&lt;/code&gt;-ing everyone!&lt;/p&gt; </description> <pubDate>Sat, 10 Jun 2017 00:00:00 -0500</pubDate> <link>http://joeellis.la/iex-remsh-shells/</link> <guid isPermaLink="true">http://joeellis.la/iex-remsh-shells/</guid> <category>elixir</category> </item> <item> <title>Streaming Data with Ecto</title> <description>&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you are not familiar with Elixir streams, you should &lt;a href=&quot;http://elixir-lang.org/getting-started/enumerables-and-streams.html#streams&quot;&gt;read the documentation&lt;/a&gt; on streams first or this post may be hard to follow.&lt;/p&gt; &lt;p&gt;It’s a given that in your programming career, you will need to fetch a dataset and run some set of operations on it. With small datasets, you can often get away with fetching the records at once and doing what you need to do. But if you’re trying to fetch a large dataset, you will run into some common problems. It’s &lt;strong&gt;very&lt;/strong&gt; slow, creates a blocking database connection, and most database libraries will load the dataset into memory which can slow down or kill your server.&lt;/p&gt; &lt;p&gt;Fortunately, Ecto &lt;a href=&quot;https://hexdocs.pm/ecto/Ecto.Repo.html#c:stream/2&quot;&gt;has a fantastic tool&lt;/a&gt; for handling this situation, &lt;a href=&quot;https://hexdocs.pm/ecto/Ecto.Repo.html#c:stream/2&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Repo.stream/2&lt;/code&gt;&lt;/a&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Repo.stream/2&lt;/code&gt; avoids fetching everything at once and instead fetches data in iterative cycles, performing operations on each record along the way.&lt;/p&gt; &lt;p&gt;In this example, we will work through a typical app feature: exporting database records as CSV files. It’s a useful feature and is a good example to show how versatile Elixir streams can be.&lt;/p&gt; &lt;p&gt;First, let’s look at some code:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UserExporter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@columns&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inserted_at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updated_at&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/tmp/users.csv&quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CSV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# order our data to match our column order&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Here we have a module with one public function, &lt;code class=&quot;highlighter-rouge&quot;&gt;export/1&lt;/code&gt;, that accepts an Ecto query and returns back a file stream.&lt;/p&gt; &lt;p&gt;At the top, we declare a &lt;code class=&quot;highlighter-rouge&quot;&gt;@columns&lt;/code&gt; module attribute to define the user data to show in our file. We’ll need to refer to this &lt;code class=&quot;highlighter-rouge&quot;&gt;@columns&lt;/code&gt; list later to reorder our data for the CSV file.&lt;/p&gt; &lt;p&gt;Next is the meat of the exporter. The first thing we do is open up a database transaction. This is a good idea when iterating over a large dataset and also a requirement when using &lt;code class=&quot;highlighter-rouge&quot;&gt;Repo.stream/2&lt;/code&gt; with either a MySQL or Postgres. All work using &lt;code class=&quot;highlighter-rouge&quot;&gt;Repo.stream/2&lt;/code&gt; needs to take place inside a transaction.&lt;/p&gt; &lt;p&gt;Having opened a transaction, we pass our query to &lt;code class=&quot;highlighter-rouge&quot;&gt;Repo.stream/2&lt;/code&gt; which creates the initial stream. Remember, this only creates the stream; streams are lazily evaluated, so we haven’t starting making any calls to the database yet.&lt;/p&gt; &lt;p&gt;We then pass the stream to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Stream.map&lt;/code&gt; function which will fetch and transform data from each user struct into a list of user data matching the order of our columns.&lt;/p&gt; &lt;p&gt;Using the wonderful &lt;a href=&quot;https://github.com/beatrichartz/csv&quot;&gt;CSV library&lt;/a&gt;, we then pass the stream to the &lt;code class=&quot;highlighter-rouge&quot;&gt;CSV.encode/1&lt;/code&gt; function to do all the hard work. &lt;code class=&quot;highlighter-rouge&quot;&gt;CSV.encode/1&lt;/code&gt; both accepts and return streams, so it fits right into our pipeline setup here.&lt;/p&gt; &lt;p&gt;Finally, a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;Enum.into&lt;/code&gt; runs the whole stream, and the actual database calls start. By default, &lt;code class=&quot;highlighter-rouge&quot;&gt;Repo.stream/2&lt;/code&gt; pulls down 500 records at a time, and each is parsed and written to a file at &lt;code class=&quot;highlighter-rouge&quot;&gt;tmp/users.csv&lt;/code&gt;. Lastly, our function returns a file stream that points to our newly created file. We can use this new stream to do more file-based operations or start some other stream-based work, like uploading the file to S3, etc.&lt;/p&gt; &lt;p&gt;As a test, we can see the results of our CSV in an iex console:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UserExporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;line_or_bytes:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;modes:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:binary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;path:&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/tmp/users.csv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;raw:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;1,joe@example.com,2017-04-27 21:57:42.972524,2017-05-20 18:48:16.235083\r\n2,jane@example.com,2017-04-27 18:36:32.053556,2017-04-27 18:36:32.065434\r\n3,jill@example.com,2017-04-27 18:37:43.503567,2017-04-27 18:37:43.503575\r\n&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Pretty neat, eh? Using streams, we created a simple and ordered pipeline to efficiently fetch data, transform it, and write it into a file - 500 records at a time. &lt;code class=&quot;highlighter-rouge&quot;&gt;Repo.stream/2&lt;/code&gt; is a very handy tool dealing with large datasets, I highly recommend you give it a try if you haven’t heard of it before.&lt;/p&gt; </description> <pubDate>Sun, 21 May 2017 00:00:00 -0500</pubDate> <link>http://joeellis.la/streaming-with-ecto/</link> <guid isPermaLink="true">http://joeellis.la/streaming-with-ecto/</guid> <category>elixir</category> <category>ecto</category> </item> <item> <title>Nested Modules and Auto-Aliasing in Elixir</title> <description>&lt;p&gt;Recently, I was coding a module to create CSV files from database records when I came across an unexpected error in Elixir. Using the &lt;a href=&quot;https://github.com/beatrichartz/csv&quot;&gt;CSV&lt;/a&gt; library, I wrote something like this:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# mix.exs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;~&amp;gt; 1.4.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# csv.ex&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CSV&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CSV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;I expected &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo.CSV.export(file)&lt;/code&gt; to trigger the &lt;code class=&quot;highlighter-rouge&quot;&gt;CSV&lt;/code&gt; library to encode the file I passed into the function. To my surprise, the app came back with this error:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UndefinedFunctionError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CSV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;private&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;This error kind of makes sense. I’m calling a function on a &lt;code class=&quot;highlighter-rouge&quot;&gt;CSV&lt;/code&gt; module, and I &lt;em&gt;just&lt;/em&gt; defined a named &lt;code class=&quot;highlighter-rouge&quot;&gt;CSV&lt;/code&gt; module right above it. Naturally, the app should be confused as to which &lt;code class=&quot;highlighter-rouge&quot;&gt;CSV&lt;/code&gt; module I’m referring to. But I really didn’t want to change my module’s name, so how can I tell the app which module I want to use?&lt;/p&gt; &lt;p&gt;After some experimenting, I found something even more interesting - switching from a nested module to a single namespaced module made it work:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# csv.ex&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CSV&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CSV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;What?? I thought nested modules and namespaced modules compiled to the same thing? Shouldn’t the first example also compile to &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo.CSV&lt;/code&gt;? And why does the second example not throw the same error as the first one?&lt;/p&gt; &lt;h3 id=&quot;why-this-happens&quot;&gt;Why this happens&lt;/h3&gt; &lt;p&gt;After asking around, I found this behavior puzzled other Elixir developers as well. Thankfully, &lt;a href=&quot;http://github.com/bryanjos&quot;&gt;Bryan Joseph&lt;/a&gt; helped me figure out what was happening and also pointed me to part in &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#defmodule/2-nesting&quot;&gt;the docs&lt;/a&gt; that explains this behavior.&lt;/p&gt; &lt;p&gt;While compiling, when Elixir reaches a nested module, it creates an “auto-alias” for that nested module. In other words, this code:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CSV&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CSV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;actually compiles to something more like this behind the scenes:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CSV&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CSV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CSV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;as:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CSV&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;This is why my original example threw an error - when &lt;code class=&quot;highlighter-rouge&quot;&gt;CSV.encode(file)&lt;/code&gt; is called, the auto-alias directs the app to instead look for an &lt;code class=&quot;highlighter-rouge&quot;&gt;encode/1&lt;/code&gt; function on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Elixir.Foo.CSV&lt;/code&gt; module.&lt;/p&gt; &lt;p&gt;Yet, when modules are not nested, the compiler does not create an auto-alias, so there is no confusion about which &lt;code class=&quot;highlighter-rouge&quot;&gt;CSV&lt;/code&gt; module I’m trying to reference.&lt;/p&gt; &lt;p&gt;So if you are hitting a similar error with nested modules, consider either changing the name or switching over to a namespaced module instead.&lt;/p&gt; </description> <pubDate>Wed, 10 May 2017 00:00:00 -0500</pubDate> <link>http://joeellis.la/elixir-nested-modules/</link> <guid isPermaLink="true">http://joeellis.la/elixir-nested-modules/</guid> <category>elixir</category> </item> </channel> </rss>